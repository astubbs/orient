<hazelcast>
	<group>
		<name>orientkv</name>
		<password>orient</password>
	</group>
	<network>
		<port auto-increment="true">5701</port>
		<join>
			<multicast enabled="true">
				<multicast-group>224.2.2.3</multicast-group>
				<multicast-port>54327</multicast-port>
			</multicast>
			<tcp-ip enabled="false">
				<interface>127.0.0.1</interface>
			</tcp-ip>
		</join>
		<interfaces enabled="true">
			<interface>127.0.0.1</interface>
		</interfaces>
		<symmetric-encryption enabled="false">
			<!--
				encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES, AES/CBC/PKCS5Padding, Blowfish, DESede
			-->
			<algorithm>PBEWithMD5AndDES</algorithm>
			<!-- salt value to use when generating the secret key -->
			<salt>thesalt</salt>
			<!-- pass phrase to use when generating the secret key -->
			<password>thepass</password>
			<!-- iteration count to use when generating the secret key -->
			<iteration-count>19</iteration-count>
		</symmetric-encryption>
		<asymmetric-encryption enabled="false">
			<!-- encryption algorithm -->
			<algorithm>RSA/NONE/PKCS1PADDING</algorithm>
			<!-- private key password -->
			<keyPassword>thekeypass</keyPassword>
			<!-- private key alias -->
			<keyAlias>local</keyAlias>
			<!-- key store type -->
			<storeType>JKS</storeType>
			<!-- key store password -->
			<storePassword>thestorepass</storePassword>
			<!-- path to the key store -->
			<storePath>keystore</storePath>
		</asymmetric-encryption>
	</network>
	<executor-service>
		<core-pool-size>16</core-pool-size>
		<max-pool-size>64</max-pool-size>
		<keep-alive-seconds>60</keep-alive-seconds>
	</executor-service>
	<queue name="default">
		<!--
			Maximum size of the queue. When a JVM's local queue size reaches the maximum, all put/offer operations will get blocked until the
			queue size of the JVM goes down below the maximum. Any integer between 0 and Integer.MAX_VALUE. 0 means Integer.MAX_VALUE.
			Default is 0.
		-->
		<max-size-per-jvm>10000</max-size-per-jvm>
		<!--
			Maximum number of seconds for each item to stay in the queue. Items that are not consumed in <time-to-live-seconds> will
			automatically get evicted from the queue. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
		<time-to-live-seconds>0</time-to-live-seconds>
	</queue>
	<map name="default">
		<map-store enabled="true">
			<!--
				OrientDB implementation (www.orientechnologies.com). It's very fast, Open Source with Apache 2 license.
			-->
			<class-name>com.orientechnologies.orient.kv.network.protocol.http.partitioned.OMapLoaderStore</class-name>
			<!--
				Number of seconds to delay to call the MapStore.store(key, value). If the value is zero then it is write-through so
				MapStore.store(key, value) will be called as soon as the entry is updated. Otherwise it is write-behind so updates will be
				stored after write-delay-seconds value by calling Hazelcast.storeAll(map). Default value is 0.
			-->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
		<!--
			Number of backups. If 1 is set as the backup-count for example, then all entries of the map will be copied to another JVM for
			fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
		-->
		<backup-count>1</backup-count>
		<!--
			Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU (Least Frequently Used). NONE is the default.
		-->
		<eviction-policy>LRU</eviction-policy>
		<!--
			Maximum size of the map. When max size is reached, map is evicted based on the policy defined. Any integer between 0 and
			Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
		-->
		<max-size>5000</max-size>
		<!--
			When max. size is reached, specified percentage of the map will be evicted. Any integer between 0 and 100. If 25 is set for
			example, 25% of the entries will get evicted.
		-->
		<eviction-percentage>25</eviction-percentage>
	</map>
</hazelcast>